#!/usr/sbin/nft -f

flush ruleset

define WAN = wlp6s0
define VPN = wg0
define LXC = incusbr0
define LOCAL_NET = 192.168.0.0/24
define JOPLIN_PORT = 30001
define BOOKSTACK_PORT = 30002
define MINECRAFT_PORT = 25565
define K3S_MASTER = 10.43.156.113 
define IP_DEV1 = 10.43.156.233
define IP_DZIADEK = 10.43.156.64
define WG_PORT = 51043

table inet filter {
	chain input {
		type filter hook input priority filter; policy accept;
	
		iifname lo accept

 		iif $WAN tcp dport { ssh } accept
		iif $WAN icmp type { echo-request, echo-reply } accept
		iifname $VPN icmp type { echo-request, echo-reply } accept
		iifname $VPN tcp dport ssh accept

		iifname $VPN tcp dport { $JOPLIN_PORT } accept comment "joplin from VPN"
		iifname $VPN tcp dport { $BOOKSTACK_PORT } accept comment "bookstack from VPN"

		ip saddr $LOCAL_NET tcp dport ssh accept comment "ssh from local network"
		ip saddr $LOCAL_NET tcp dport { 631 } accept comment "cups from local network"
		ip saddr $LOCAL_NET tcp dport { $JOPLIN_PORT } accept comment "joplin server from local network"
		ip saddr $LOCAL_NET tcp dport { $BOOKSTACK_PORT } accept comment "bookstack from local network"
		ip saddr $LOCAL_NET tcp dport { $MINECRAFT_PORT } accept comment "minecraft from local network"

		iif $WAN udp dport { $WG_PORT } accept comment "wireguard in"
		iif $WAN ct state { established, related } accept	
		iif $WAN drop
	}
	chain forward {
		type filter hook forward priority filter; policy accept;
	}
	chain output {
		type filter hook output priority filter; policy accept;
		iif $WAN udp dport {51043} accept comment wireguard
	}
}

table inet nat {

	chain prerouting {
		type nat hook prerouting priority dstnat; policy accept;
		# Forward custom SSH ports from wg0 to container
		iifname $VPN tcp dport { 22243 } dnat ip to $IP_DZIADEK
		iifname $VPN tcp dport { 22244 } dnat ip to $IP_DZIADEK
		iifname $VPN tcp dport { 4343 } dnat ip to $IP_DZIADEK
		iifname $VPN tcp dport { 52000 } dnat ip to $IP_DEV1
		iifname $WAN tcp dport { 52000 } dnat ip to $IP_DEV1
		iifname $VPN tcp dport { 52080 } dnat ip to $IP_DEV1
		iifname $WAN tcp dport { 52080 } dnat ip to $IP_DEV1
		# forward service requests to Kubernetes (master)
		ip saddr $LOCAL_NET tcp dport { $JOPLIN_PORT } dnat ip to $K3S_MASTER
		ip saddr $LOCAL_NET tcp dport { $BOOKSTACK_PORT } dnat ip to $K3S_MASTER
		iifname $VPN tcp dport { $JOPLIN_PORT } dnat ip to $K3S_MASTER
		iifname $VPN tcp dport { $BOOKSTACK_PORT } dnat ip to $K3S_MASTER
	}

}

table inet incus-overrides {

	chain in.incusbr0.overrides {
		type filter hook input priority filter; policy accept;
	}
}

table inet incus {
	chain pstrt.incusbr0 {
		type nat hook postrouting priority srcnat; policy accept;
		ip saddr 10.43.156.0/24 ip daddr != 10.43.156.0/24 masquerade
		ip6 saddr fd42:21db:4912:474d::/64 ip6 daddr != fd42:21db:4912:474d::/64 masquerade
	}

	chain fwd.incusbr0 {
		type filter hook forward priority filter; policy accept;
		ip version 4 oifname "incusbr0" accept
		ip version 4 iifname "incusbr0" accept
	}

	chain in.incusbr0 {
		type filter hook input priority filter; policy accept;
		iifname "incusbr0" tcp dport 53 accept
		iifname "incusbr0" udp dport 53 accept
		iifname "incusbr0" icmp type { destination-unreachable, time-exceeded, parameter-problem } accept
		iifname "incusbr0" udp dport 67 accept
	}

	chain out.incusbr0 {
		type filter hook output priority filter; policy accept;
		oifname "incusbr0" tcp sport 53 accept
		oifname "incusbr0" udp sport 53 accept
		oifname "incusbr0" icmp type { destination-unreachable, time-exceeded, parameter-problem } accept
		oifname "incusbr0" udp sport 67 accept
	}
}

